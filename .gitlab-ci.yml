# Fallback: Use this tag when the cs servers are down.
#default:
#  tags: [ 'bi-lab' ]

stages:
  - build
  - test
  - report
  - build-docker-images
  - deploy

cache:
  key: one-key-to-rule-them-all
  paths:
    - ./.m2/repository
    - ./resources/public/node_modules

variables:
  BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend
  BACKEND_IMAGE_TAGGED: $CI_REGISTRY_IMAGE/backend:$CI_PIPELINE_IID
  FRONTEND_IMAGE_TAGGED: $CI_REGISTRY_IMAGE/frontend:$CI_PIPELINE_IID

# ------------------------------------------------------------------------------
# Stage "build-docker-images"

build-frontend-image:
  extends: .with-datomic-pro
  image: docker
  tags:
    - ht
  services:
    - docker:dind
  stage: build-docker-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - >
      docker build -f Dockerfile.frontend --pull
      --build-arg REST_API_URL=https://api.app.schnaq.com
      --build-arg BUILD_HASH=$CI_COMMIT_SHORT_SHA
      --build-arg KEYCLOAK_REALM=$KEYCLOAK_REALM
      --build-arg KEYCLOAK_CLIENT=$KEYCLOAK_CLIENT
      --build-arg FAQ_SHARE_HASH=$FAQ_SHARE_HASH
      -t $FRONTEND_IMAGE_TAGGED .
    - docker tag $FRONTEND_IMAGE_TAGGED $FRONTEND_IMAGE:latest
    - docker push $FRONTEND_IMAGE_TAGGED
    - docker push $FRONTEND_IMAGE:latest
  only:
    - deploy

build-backend-image:
  extends: .with-datomic-pro
  image: docker
  tags:
    - ht
  services:
    - docker:dind
  stage: build-docker-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - >
      docker build -f Dockerfile.backend --pull
      --build-arg BUILD_HASH=$CI_COMMIT_SHORT_SHA
      -t $BACKEND_IMAGE_TAGGED .
    - docker tag $BACKEND_IMAGE_TAGGED $BACKEND_IMAGE:latest
    - docker push $BACKEND_IMAGE_TAGGED
    - docker push $BACKEND_IMAGE:latest
  only:
    - deploy

# ------------------------------------------------------------------------------

build-frontend-staging-image:
  extends: .with-datomic-pro
  image: docker
  tags:
    - ht
  services:
    - docker:dind
  stage: build-docker-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - >
      docker build -f Dockerfile.frontend --pull
      --build-arg REST_API_URL=https://api.app.staging.schnaq.com
      --build-arg BUILD_HASH=$CI_COMMIT_SHORT_SHA
      --build-arg KEYCLOAK_REALM=$KEYCLOAK_REALM_STAGING
      --build-arg KEYCLOAK_CLIENT=$KEYCLOAK_CLIENT_STAGING
      --build-arg ROBOTS_TXT=./robots-staging.txt
      -t ${FRONTEND_IMAGE_TAGGED}-staging .
    - docker tag ${FRONTEND_IMAGE_TAGGED}-staging $FRONTEND_IMAGE:staging
    - docker push ${FRONTEND_IMAGE_TAGGED}-staging
    - docker push $FRONTEND_IMAGE:staging
  only:
    - develop

build-backend-staging-image:
  extends: .with-datomic-pro
  image: docker
  tags:
    - ht
  services:
    - docker:dind
  stage: build-docker-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - >
      docker build -f Dockerfile.backend --pull
      --build-arg BUILD_HASH=$CI_COMMIT_SHORT_SHA
      -t ${BACKEND_IMAGE_TAGGED}-staging .
    - docker tag ${BACKEND_IMAGE_TAGGED}-staging $BACKEND_IMAGE:staging
    - docker push ${BACKEND_IMAGE_TAGGED}-staging
    - docker push $BACKEND_IMAGE:staging
  only:
    - develop

# ------------------------------------------------------------------------------
# Deploy

deploy-staging:
  stage: deploy
  variables:
    DEPLOYMENT: staging
    DEPLOY_BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend:$CI_PIPELINE_IID-staging # here, we cannot use the constructed vars from above, because than var expansion fails.
    DEPLOY_FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend:$CI_PIPELINE_IID-staging
  trigger: dialogo/deployments/schnaq
  only:
    - develop

deploy-production:
  stage: deploy
  variables:
    DEPLOYMENT: app
    DEPLOY_BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend:$CI_PIPELINE_IID
    DEPLOY_FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend:$CI_PIPELINE_IID
  trigger: dialogo/deployments/schnaq
  only:
    - deploy
