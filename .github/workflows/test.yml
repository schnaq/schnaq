on: [push]

env:
  APP_CODE: ${{ secrets.APP_CODE }}
  CLEVERREACH_ENABLED: false
  DATOMIC_REPO_USERNAME: ${{ secrets.DATOMIC_REPO_USERNAME }}
  DATOMIC_REPO_PASSWORD: ${{ secrets.DATOMIC_REPO_PASSWORD }}
  KEYCLOAK_ADMIN_ID: ${{ secrets.KEYCLOAK_ADMIN_ID }}
  KEYCLOAK_ADMIN_SECRET: ${{ secrets.KEYCLOAK_ADMIN_SECRET }}
  KEYCLOAK_REALM: ${{ secrets.KEYCLOAK_REALM }}
  S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
  S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  STRIPE_WEBHOOK_ACCESS_KEY: ${{ secrets.STRIPE_WEBHOOK_ACCESS_KEY }}
  SUMMY_URL: ${{ secrets.SUMMY_URL }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Clojure Tests
    steps:
      - uses: actions/checkout@v3
      - id: setup-clojure
        uses: ./.github/actions/setup_clojure

      - name: Start Clojure Tests
        run: clojure -Sdeps '{:mvn/local-repo "./.m2/repository"}' -M:test

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: target/coverage/lcov.info
          retention-days: 1

  test-cljs:
    runs-on: ubuntu-latest
    name: ClojureScript Tests
    steps:
      - uses: actions/checkout@v3
      - id: setup-clojure
        uses: ./.github/actions/setup_clojure
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: Install yarn dependencies
        run: yarn install

      - name: Start ClojureScript Tests
        run: clojure -Sdeps '{:mvn/local-repo "./.m2/repository"}' -M:test-cljs
      - run: yarn karma start --single-run

  lint:
    runs-on: ubuntu-latest
    name: Lint code
    steps:
      - uses: actions/checkout@v3
      - id: setup-clojure
        uses: ./.github/actions/setup_clojure

      - name: Run clj-kondo
        run: clj-kondo --lint src/

  up-to-date-deps:
    runs-on: ubuntu-latest
    name: Check Clojure deps
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - id: setup-clojure
        uses: ./.github/actions/setup_clojure

      - name: Check if deps.edn is up to date
        run: clojure -Sdeps '{:mvn/local-repo "./.m2/repository"}' -M:outdated

  # ------------------------------------------------------------------------------

  push:
    name: Push Docker image
    # needs: [test, test-cljs]

    runs-on: ubuntu-latest
    # if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true # ${{ github.event_name != 'pull_request' }}
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
